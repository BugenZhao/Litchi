     1                                  	org	0x7c00
     2 00000000 E9B600                  	jmp	LABEL_ENTRY
     3                                  
     4                                  ; Standard FAT12 floppy code
     5 00000003 90                      			DB 	0x90		; 固定
     6 00000004 425A4C4954434849        BS_OEMName		DB 	'BZLITCHI'	; OEM String, 必须 8 个字节
     7 0000000C 0002                    BPB_BytsPerSec		DW 	512		; 每扇区字节数
     8 0000000E 01                      BPB_SecPerClus		DB 	1		; 每簇多少扇区
     9 0000000F 0100                    BPB_RsvdSecCnt		DW 	1		; Boot 记录占用多少扇区
    10 00000011 02                      BPB_NumFATs		DB 	2		; 共有多少 FAT 表
    11 00000012 E000                    BPB_RootEntCnt		DW 	224		; 根目录文件数最大值
    12 00000014 400B                    BPB_TotSec16		DW 	2880		; 逻辑扇区总数
    13 00000016 F0                      BPB_Media		DB 	0xF0		; 媒体描述符
    14 00000017 0900                    BPB_FATSz16		DW 	9		; 每FAT扇区数
    15 00000019 1200                    BPB_SecPerTrk		DW 	18		; 每磁道扇区数
    16 0000001B 0200                    BPB_NumHeads		DW 	2		; 磁头数(面数)
    17 0000001D 00000000                BPB_HiddSec		DD 	0		; 隐藏扇区数
    18 00000021 00000000                BPB_TotSec32		DD 	0		; 如果 wTotalSectorCount 是 0 由这个值记录扇区数
    19 00000025 00                      BS_DrvNum		DB 	0		; 中断 13 的驱动器号
    20 00000026 00                      BS_Reserved1		DB 	0		; 未使用
    21 00000027 29                      BS_BootSig		DB 	29h		; 扩展引导标记 (29h)
    22 00000028 00000000                BS_VolID		DD 	0		; 卷序列号
    23 0000002C 425A4C49544348494F-     BS_VolLab		DB 	'BZLITCHIOS '	; 卷标, 必须 11 个字节
    23 00000035 5320               
    24 00000037 4641543132202020        BS_FileSysType		DB 	'FAT12   '	; 文件系统类型, 必须 8个字节  
    25                                  
    26                                  BaseOfStack		equ	0x7c00		; 栈底，向低地址生长
    27                                  BaseOfLoader		equ	0x9000		; Loader 加载基址
    28                                  OffsetOfLoader		equ	0x100		; Loader 加载偏移
    29                                  RootDirSectors		equ	14		; 根据根目录 224 项得到
    30                                  SectorNoOfRootDirectory	equ	19		; 根目录开始扇区号，第二个 FAT 表
    31                                  
    32 0000003F 0E00                    wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数，
    33                                  						; 在循环中会递减至零.
    34 00000041 0000                    wSectorNo		dw	0		; 要读取的扇区号
    35 00000043 00                      bOdd			db	0		; 奇数还是偶数
    36                                  
    37                                  MessageBegin:
    38 00000044 48656C6C6F2C204C69-     HelloMessage:		db	"Hello, Litchi!", 0x0d, 0x0a, "BugenZhao 2020", 0x0d, 0x0a
    38 0000004D 74636869210D0A4275-
    38 00000056 67656E5A68616F2032-
    38 0000005F 3032300D0A         
    39 00000064 426F6F74696E672E2E-     BootMessage:		db	"Booting..."
    39 0000006D 2E                 
    40                                  MessageEnd:
    41                                  
    42                                  ClearScreen:
    43 0000006E B80300                  	mov	ax, 0x0003
    44 00000071 CD10                    	int	10h					; clear screen
    45 00000073 C3                      	ret
    46                                  
    47                                  DispStr:
    48                                  	; message in di, end in si
    49 00000074 89FD                    	mov	bp, di					; string address
    50 00000076 89F1                    	mov	cx, si
    51 00000078 29F9                    	sub	cx, di					; calculate string length
    52 0000007A B80113                  	mov	ax, 0x1301				; ah=0x13 (write string)
    53 0000007D BB0D00                  	mov	bx, 0x000d				; bh=0x00 (page), bl=0x0d (color)
    54 00000080 30D2                    	xor	dl, dl					; row:col = 0:0
    55 00000082 CD10                    	int	10h
    56 00000084 C3                      	ret
    57                                  
    58                                  ReadSector:
    59                                  	; start_sector in di, size in cl, buf in es:bx
    60                                  	; 扇区号 x 除以 18（每个磁道的扇区），商 q，余 r
    61                                  	; 柱面 q >> 1, 磁头 q & 1, 起始扇区 r + 1
    62 00000085 55                      	push	bp
    63 00000086 89E5                    	mov	bp, sp					; 保存栈指针
    64 00000088 6683EC02                	sub	esp, 2					; 在栈上开辟 2 个字节
    65 0000008C 884EFE                  	mov	byte [bp-2], cl
    66 0000008F 89F8                    	mov	ax, di					; 构造被除数
    67 00000091 53                      	push	bx
    68 00000092 8A1E[1900]              	mov	bl, [BPB_SecPerTrk]			; 构造除数 18
    69 00000096 F6F3                    	div	bl					; ax/bl (8 bits), q in al, r in ah
    70 00000098 FEC4                    	inc	ah					; r + 1
    71 0000009A 88E1                    	mov	cl, ah					; cl -> 起始扇区号
    72 0000009C 88C6                    	mov	dh, al					
    73 0000009E 80E601                  	and	dh, 1					; dh -> 磁头
    74 000000A1 88C5                    	mov	ch, al
    75 000000A3 D0ED                    	shr	ch, 1					; ch -> 柱面
    76 000000A5 5B                      	pop	bx
    77 000000A6 8A16[2500]              	mov	dl, [BS_DrvNum]				; dl -> 驱动器号
    78                                  .DoRead:
    79 000000AA 8A46FE                  	mov	al, byte [bp-2]				; al -> 要读扇区数
    80 000000AD B402                    	mov	ah, 2					; 要读了！
    81 000000AF CD13                    	int	13h					; 读！错误时 CF 置 1
    82 000000B1 72F7                    	jc	.DoRead					; 错误重试
    83                                  
    84 000000B3 6683C402                	add	esp, 2
    85 000000B7 5D                      	pop	bp
    86 000000B8 C3                      	ret
    87                                  
    88                                  
    89                                  LABEL_ENTRY:
    90                                  	; 初始化堆栈
    91 000000B9 8CC8                    	mov	ax, cs
    92 000000BB 8ED8                    	mov	ds, ax
    93 000000BD 8EC0                    	mov	es, ax
    94 000000BF 8ED0                    	mov	ss, ax
    95 000000C1 BC007C                  	mov	sp, BaseOfStack
    96                                  
    97 000000C4 30E4                    	xor	ah, ah
    98 000000C6 30D2                    	xor	dl, dl
    99 000000C8 CD13                    	int	13h					; 软驱复位
   100                                  
   101 000000CA E8A1FF                  	call	ClearScreen
   102 000000CD BF[4400]                	mov	di, HelloMessage			; string
   103 000000D0 BE[6400]                	mov	si, BootMessage				; string end
   104 000000D3 E89EFF                  	call	DispStr
   105                                  
   106                                  
   107                                  
   108                                  Fin:
   109 000000D6 F4                      	hlt
   110 000000D7 EBFD                    	jmp	Fin
