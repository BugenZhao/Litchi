     1                                  	org	0x100
     2 00000000 E9(3101)                	jmp	Entry
     3                                  
     4                                  %include	"pm.inc"
     1                              <1> 
     2                              <1> 
     3                              <1> ; 描述符图示
     4                              <1> 
     5                              <1> ; 图示一
     6                              <1> ;
     7                              <1> ;  ------ ┏━━┳━━┓高地址
     8                              <1> ;         ┃ 7  ┃ 段 ┃
     9                              <1> ;         ┣━━┫    ┃
    10                              <1> ;                  基
    11                              <1> ;  字节 7 ┆    ┆    ┆
    12                              <1> ;                  址
    13                              <1> ;         ┣━━┫ ② ┃
    14                              <1> ;         ┃ 0  ┃    ┃
    15                              <1> ;  ------ ┣━━╋━━┫
    16                              <1> ;         ┃ 7  ┃ G  ┃
    17                              <1> ;         ┣━━╉──┨
    18                              <1> ;         ┃ 6  ┃ D  ┃
    19                              <1> ;         ┣━━╉──┨
    20                              <1> ;         ┃ 5  ┃ 0  ┃
    21                              <1> ;         ┣━━╉──┨
    22                              <1> ;         ┃ 4  ┃ AVL┃
    23                              <1> ;  字节 6 ┣━━╉──┨
    24                              <1> ;         ┃ 3  ┃    ┃
    25                              <1> ;         ┣━━┫ 段 ┃
    26                              <1> ;         ┃ 2  ┃ 界 ┃
    27                              <1> ;         ┣━━┫ 限 ┃
    28                              <1> ;         ┃ 1  ┃    ┃
    29                              <1> ;         ┣━━┫ ② ┃
    30                              <1> ;         ┃ 0  ┃    ┃
    31                              <1> ;  ------ ┣━━╋━━┫
    32                              <1> ;         ┃ 7  ┃ P  ┃
    33                              <1> ;         ┣━━╉──┨
    34                              <1> ;         ┃ 6  ┃    ┃
    35                              <1> ;         ┣━━┫ DPL┃
    36                              <1> ;         ┃ 5  ┃    ┃
    37                              <1> ;         ┣━━╉──┨
    38                              <1> ;         ┃ 4  ┃ S  ┃
    39                              <1> ;  字节 5 ┣━━╉──┨
    40                              <1> ;         ┃ 3  ┃    ┃
    41                              <1> ;         ┣━━┫ T  ┃
    42                              <1> ;         ┃ 2  ┃ Y  ┃
    43                              <1> ;         ┣━━┫ P  ┃
    44                              <1> ;         ┃ 1  ┃ E  ┃
    45                              <1> ;         ┣━━┫    ┃
    46                              <1> ;         ┃ 0  ┃    ┃
    47                              <1> ;  ------ ┣━━╋━━┫
    48                              <1> ;         ┃ 23 ┃    ┃
    49                              <1> ;         ┣━━┫    ┃
    50                              <1> ;         ┃ 22 ┃    ┃
    51                              <1> ;         ┣━━┫ 段 ┃
    52                              <1> ;
    53                              <1> ;   字节  ┆    ┆ 基 ┆
    54                              <1> ; 2, 3, 4
    55                              <1> ;         ┣━━┫ 址 ┃
    56                              <1> ;         ┃ 1  ┃ ① ┃
    57                              <1> ;         ┣━━┫    ┃
    58                              <1> ;         ┃ 0  ┃    ┃
    59                              <1> ;  ------ ┣━━╋━━┫
    60                              <1> ;         ┃ 15 ┃    ┃
    61                              <1> ;         ┣━━┫    ┃
    62                              <1> ;         ┃ 14 ┃    ┃
    63                              <1> ;         ┣━━┫ 段 ┃
    64                              <1> ;
    65                              <1> ; 字节 0,1┆    ┆ 界 ┆
    66                              <1> ;
    67                              <1> ;         ┣━━┫ 限 ┃
    68                              <1> ;         ┃ 1  ┃ ① ┃
    69                              <1> ;         ┣━━┫    ┃
    70                              <1> ;         ┃ 0  ┃    ┃
    71                              <1> ;  ------ ┗━━┻━━┛低地址
    72                              <1> ;
    73                              <1> 
    74                              <1> 
    75                              <1> ; 图示二
    76                              <1> 
    77                              <1> ; 高地址………………………………………………………………………低地址
    78                              <1> 
    79                              <1> ; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |
    80                              <1> ; |7654321076543210765432107654321076543210765432107654321076543210|	<- 共 8 字节
    81                              <1> ; |--------========--------========--------========--------========|
    82                              <1> ; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓
    83                              <1> ; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃
    84                              <1> ; ┃      ┃              ┃                      ┃              ┃
    85                              <1> ; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃
    86                              <1> ; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫
    87                              <1> ; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃
    88                              <1> ; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛
    89                              <1> ;         │                \_________
    90                              <1> ;         │                          \__________________
    91                              <1> ;         │                                             \________________________________________________
    93                              <1> ;         │                                                                                              ;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳
    94                              <1> ;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
    95                              <1> ;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫
    96                              <1> ;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃
    97                              <1> ;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫
    98                              <1> ;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃
    99                              <1> ;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛
   100                              <1> ;       高地址                                                                                          低地址
   101                              <1> ;
   102                              <1> ;
   103                              <1> 
   104                              <1> ; 说明:
   105                              <1> ;
   106                              <1> ; (1) P:    存在(Present)位。
   107                              <1> ;		P=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；
   108                              <1> ;		P=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。
   109                              <1> ;
   110                              <1> ; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 
   111                              <1> ;
   112                              <1> ; (3) S:   说明描述符的类型。
   113                              <1> ;		对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 
   114                              <1> ;
   115                              <1> ; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。
   116                              <1> ;
   117                              <1> ;		 
   118                              <1> ;	数据段类型	类型值		说明
   119                              <1> ;			----------------------------------
   120                              <1> ;			0		只读 
   121                              <1> ;			1		只读、已访问 
   122                              <1> ;			2		读/写 
   123                              <1> ;			3		读/写、已访问 
   124                              <1> ;			4		只读、向下扩展 
   125                              <1> ;			5		只读、向下扩展、已访问 
   126                              <1> ;			6		读/写、向下扩展 
   127                              <1> ;			7		读/写、向下扩展、已访问 
   128                              <1> ;
   129                              <1> ;		
   130                              <1> ;			类型值		说明
   131                              <1> ;	代码段类型	----------------------------------
   132                              <1> ;			8		只执行 
   133                              <1> ;			9		只执行、已访问 
   134                              <1> ;			A		执行/读 
   135                              <1> ;			B		执行/读、已访问 
   136                              <1> ;			C		只执行、一致码段 
   137                              <1> ;			D		只执行、一致码段、已访问 
   138                              <1> ;			E		执行/读、一致码段 
   139                              <1> ;			F		执行/读、一致码段、已访问 
   140                              <1> ;
   141                              <1> ;		
   142                              <1> ;	系统段类型	类型编码	说明
   143                              <1> ;			----------------------------------
   144                              <1> ;			0		<未定义>
   145                              <1> ;			1		可用286TSS
   146                              <1> ;			2		LDT
   147                              <1> ;			3		忙的286TSS
   148                              <1> ;			4		286调用门
   149                              <1> ;			5		任务门
   150                              <1> ;			6		286中断门
   151                              <1> ;			7		286陷阱门
   152                              <1> ;			8		未定义
   153                              <1> ;			9		可用386TSS
   154                              <1> ;			A		<未定义>
   155                              <1> ;			B		忙的386TSS
   156                              <1> ;			C		386调用门
   157                              <1> ;			D		<未定义>
   158                              <1> ;			E		386中断门
   159                              <1> ;			F		386陷阱门
   160                              <1> ;
   161                              <1> ; (5) G:    段界限粒度(Granularity)位。
   162                              <1> ;		G=0 表示界限粒度为字节；
   163                              <1> ;		G=1 表示界限粒度为4K 字节。
   164                              <1> ;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 
   165                              <1> ;
   166                              <1> ; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 
   167                              <1> ;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。
   168                              <1> ;		① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；
   169                              <1> ;		② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 
   170                              <1> ;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。
   171                              <1> ;		① D=1表示段的上部界限为4G；
   172                              <1> ;		② D=0表示段的上部界限为64K，这是为了与80286兼容。 
   173                              <1> ;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。
   174                              <1> ;		① D=1表示使用32位堆栈指针寄存器ESP；
   175                              <1> ;		② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 
   176                              <1> ;
   177                              <1> ; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 
   178                              <1> ;
   179                              <1> 
   180                              <1> 
   181                              <1> ;----------------------------------------------------------------------------
   182                              <1> ; 在下列类型值命名中：
   183                              <1> ;       DA_  : Descriptor Attribute
   184                              <1> ;       D    : 数据段
   185                              <1> ;       C    : 代码段
   186                              <1> ;       S    : 系统段
   187                              <1> ;       R    : 只读
   188                              <1> ;       RW   : 读写
   189                              <1> ;       A    : 已访问
   190                              <1> ;       其它 : 可按照字面意思理解
   191                              <1> ;----------------------------------------------------------------------------
   192                              <1> 
   193                              <1> ; 描述符类型
   194                              <1> DA_32		EQU	4000h	; 32 位段
   195                              <1> 
   196                              <1> DA_DPL0		EQU	  00h	; DPL = 0
   197                              <1> DA_DPL1		EQU	  20h	; DPL = 1
   198                              <1> DA_DPL2		EQU	  40h	; DPL = 2
   199                              <1> DA_DPL3		EQU	  60h	; DPL = 3
   200                              <1> 
   201                              <1> ; 存储段描述符类型
   202                              <1> DA_DR		EQU	90h	; 存在的只读数据段类型值
   203                              <1> DA_DRW		EQU	92h	; 存在的可读写数据段属性值
   204                              <1> DA_DRWA		EQU	93h	; 存在的已访问可读写数据段类型值
   205                              <1> DA_C		EQU	98h	; 存在的只执行代码段属性值
   206                              <1> DA_CR		EQU	9Ah	; 存在的可执行可读代码段属性值
   207                              <1> DA_CCO		EQU	9Ch	; 存在的只执行一致代码段属性值
   208                              <1> DA_CCOR		EQU	9Eh	; 存在的可执行可读一致代码段属性值
   209                              <1> 
   210                              <1> ; 系统段描述符类型
   211                              <1> DA_LDT		EQU	  82h	; 局部描述符表段类型值
   212                              <1> DA_TaskGate	EQU	  85h	; 任务门类型值
   213                              <1> DA_386TSS	EQU	  89h	; 可用 386 任务状态段类型值
   214                              <1> DA_386CGate	EQU	  8Ch	; 386 调用门类型值
   215                              <1> DA_386IGate	EQU	  8Eh	; 386 中断门类型值
   216                              <1> DA_386TGate	EQU	  8Fh	; 386 陷阱门类型值
   217                              <1> 
   218                              <1> 
   219                              <1> ; 选择子图示:
   220                              <1> ;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓
   221                              <1> ;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
   222                              <1> ;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫
   223                              <1> ;         ┃                                 描述符索引                                 ┃ TI ┃   RPL    ┃
   224                              <1> ;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛
   225                              <1> ;
   226                              <1> ; RPL(Requested Privilege Level): 请求特权级，用于特权检查。
   227                              <1> ;
   228                              <1> ; TI(Table Indicator): 引用描述符表指示位
   229                              <1> ;	TI=0 指示从全局描述符表GDT中读取描述符；
   230                              <1> ;	TI=1 指示从局部描述符表LDT中读取描述符。
   231                              <1> ;
   232                              <1> 
   233                              <1> ;----------------------------------------------------------------------------
   234                              <1> ; 选择子类型值说明
   235                              <1> ; 其中:
   236                              <1> ;       SA_  : Selector Attribute
   237                              <1> 
   238                              <1> SA_RPL0		EQU	0	; ┓
   239                              <1> SA_RPL1		EQU	1	; ┣ RPL
   240                              <1> SA_RPL2		EQU	2	; ┃
   241                              <1> SA_RPL3		EQU	3	; ┛
   242                              <1> 
   243                              <1> SA_TIG		EQU	0	; ┓TI
   244                              <1> SA_TIL		EQU	4	; ┛
   245                              <1> ;----------------------------------------------------------------------------
   246                              <1> 
   247                              <1> 
   248                              <1> 
   249                              <1> ; 宏 ------------------------------------------------------------------------------------------------------
   250                              <1> ;
   251                              <1> ; 描述符
   252                              <1> ; usage: Descriptor Base, Limit, Attr
   253                              <1> ;        Base:  dd
   254                              <1> ;        Limit: dd (low 20 bits available)
   255                              <1> ;        Attr:  dw (lower 4 bits of higher byte are always 0)
   256                              <1> %macro Descriptor 3
   257                              <1> 	dw	%2 & 0FFFFh				; 段界限1
   258                              <1> 	dw	%1 & 0FFFFh				; 段基址1
   259                              <1> 	db	(%1 >> 16) & 0FFh			; 段基址2
   260                              <1> 	dw	((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)	; 属性1 + 段界限2 + 属性2
   261                              <1> 	db	(%1 >> 24) & 0FFh			; 段基址3
   262                              <1> %endmacro ; 共 8 字节
   263                              <1> ;
   264                              <1> ; 门
   265                              <1> ; usage: Gate Selector, Offset, DCount, Attr
   266                              <1> ;        Selector:  dw
   267                              <1> ;        Offset:    dd
   268                              <1> ;        DCount:    db
   269                              <1> ;        Attr:      db
   270                              <1> %macro Gate 4
   271                              <1> 	dw	(%2 & 0FFFFh)				; 偏移1
   272                              <1> 	dw	%1					; 选择子
   273                              <1> 	dw	(%3 & 1Fh) | ((%4 << 8) & 0FF00h)	; 属性
   274                              <1> 	dw	((%2 >> 16) & 0FFFFh)			; 偏移2
   275                              <1> %endmacro ; 共 8 字节
   276                              <1> ; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     5                                  %include	"fat12.inc"
     1                              <1> ; Standard FAT12 floppy code
     2 00000003 425A4C4954434849    <1> BS_OEMName		DB 	'BZLITCHI'	; OEM String, 必须 8 个字节
     3 0000000B 0002                <1> BPB_BytsPerSec		DW 	512		; 每扇区字节数
     4 0000000D 01                  <1> BPB_SecPerClus		DB 	1		; 每簇多少扇区
     5 0000000E 0100                <1> BPB_RsvdSecCnt		DW 	1		; Boot 记录占用多少扇区
     6 00000010 02                  <1> BPB_NumFATs		DB 	2		; 共有多少 FAT 表
     7 00000011 E000                <1> BPB_RootEntCnt		DW 	224		; 根目录文件数最大值
     8 00000013 400B                <1> BPB_TotSec16		DW 	2880		; 逻辑扇区总数
     9 00000015 F0                  <1> BPB_Media		DB 	0xF0		; 媒体描述符
    10 00000016 0900                <1> BPB_FATSz16		DW 	9		; 每FAT扇区数
    11 00000018 1200                <1> BPB_SecPerTrk		DW 	18		; 每磁道扇区数
    12 0000001A 0200                <1> BPB_NumHeads		DW 	2		; 磁头数(面数)
    13 0000001C 00000000            <1> BPB_HiddSec		DD 	0		; 隐藏扇区数
    14 00000020 400B0000            <1> BPB_TotSec32		DD 	2880		; 如果 wTotalSectorCount 是 0 由这个值记录扇区数
    15 00000024 00                  <1> BS_DrvNum		DB 	0		; 中断 13 的驱动器号
    16 00000025 00                  <1> BS_Reserved1		DB 	0		; 未使用
    17 00000026 29                  <1> BS_BootSig		DB 	29h		; 扩展引导标记 (29h)
    18 00000027 FFFFFFFF            <1> BS_VolID		DD 	0xffffffff	; 卷序列号
    19 0000002B 425A4C49544348494F- <1> BS_VolLab		DB 	"BZLITCHIOS "	; 卷标, 必须 11 个字节
    19 00000034 5320                <1>
    20 00000036 4641543132202020    <1> BS_FileSysType		DB 	"FAT12   "	; 文件系统类型, 必须 8个字节  
    21                              <1> 
    22                              <1> 
    23                              <1> RootDirSectors		equ	14		; 根据根目录 224 项得到
    24                              <1> SectorNoOfRootDirectory	equ	19		; 根目录开始扇区号，第二个 FAT 表
    25                              <1> SectorNoOfFAT1		equ	1		; FAT1 的第一个扇区号 = BPB_RsvdSecCnt
    26                              <1> DeltaSectorNo		equ	17		; DeltaSectorNo = BPB_RsvdSecCnt + (BPB_NumFATs * FATSz) - 2
    27                              <1> 						; 文件的开始Sector号 = DirEntry中的开始Sector号 + 根目录占用Sector数目 + DeltaSectorNo
    28                              <1> 
    29                              <1> 
    30                              <1> 
    31                              <1> ReadSector:
    32                              <1> 	; start_sector in ax, size in cl, buf in es:bx
    33                              <1> 	; 扇区号 x 除以 18（每个磁道的扇区），商 q，余 r
    34                              <1> 	; 柱面 q >> 1, 磁头 q & 1, 起始扇区 r + 1
    35 0000003E 55                  <1> 	push	bp
    36 0000003F 89E5                <1> 	mov	bp, sp					; 保存栈指针
    37 00000041 6683EC02            <1> 	sub	esp, 2					; 在栈上开辟 2 个字节
    38 00000045 884EFE              <1> 	mov	byte [bp-2], cl
    39 00000048 53                  <1> 	push	bx
    40 00000049 8A1E[1800]          <1> 	mov	bl, [BPB_SecPerTrk]			; 构造除数 18
    41 0000004D F6F3                <1> 	div	bl					; ax/bl (8 bits), q in al, r in ah
    42 0000004F FEC4                <1> 	inc	ah					; r + 1
    43 00000051 88E1                <1> 	mov	cl, ah					; cl -> 起始扇区号
    44 00000053 88C6                <1> 	mov	dh, al					
    45 00000055 80E601              <1> 	and	dh, 1					; dh -> 磁头
    46 00000058 88C5                <1> 	mov	ch, al
    47 0000005A D0ED                <1> 	shr	ch, 1					; ch -> 柱面
    48 0000005C 5B                  <1> 	pop	bx
    49 0000005D 8A16[2400]          <1> 	mov	dl, [BS_DrvNum]				; dl -> 驱动器号
    50                              <1> .DoRead:
    51 00000061 8A46FE              <1> 	mov	al, byte [bp-2]				; al -> 要读扇区数
    52 00000064 B402                <1> 	mov	ah, 2					; 要读了！
    53 00000066 CD13                <1> 	int	13h					; 读！错误时 CF 置 1
    54 00000068 72F7                <1> 	jc	.DoRead					; 错误重试
    55                              <1> 
    56 0000006A 6683C402            <1> 	add	esp, 2
    57 0000006E 5D                  <1> 	pop	bp
    58 0000006F C3                  <1> 	ret
     6                                  
     7                                  BaseOfKernel		equ	08000h		; KERNEL 段地址
     8                                  OffsetOfKernel		equ	0h		; KERNEL 偏移地址
     9 00000070 4B45524E454C20204C-     KernelFileName		db	"KERNEL  LIT", 0
     9 00000079 495400             
    10 0000007C 0E00                    wRootDirSizeForLoop	dw	RootDirSectors	; Root Directory 占用的扇区数，
    11                                  						; 在循环中会递减至零.
    12 0000007E 0000                    wSectorNo		dw	0		; 要读取的扇区号
    13 00000080 00                      bOdd			db	0		; 奇数还是偶数
    14                                  
    15                                  [SECTION .gdt]
    16                                  ; GDT
    17                                  ;                      段基址(稍后初始化),       段界限     , 属性
    18                                  LABEL_GDT:	   Descriptor        0,                0, 0           		; 空描述符
    18                              <1> LABEL_GDT: 
    18 00000000 0000                <1>  dw %2 & 0FFFFh
    18 00000002 0000                <1>  dw %1 & 0FFFFh
    18 00000004 00                  <1>  db (%1 >> 16) & 0FFh
    18 00000005 0000                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    18 00000007 00                  <1>  db (%1 >> 24) & 0FFh
    19                                  LABEL_DESC_NORMAL: Descriptor	     0,		  0ffffh, DA_DRW		; Normal, 用于返回实模式
    19                              <1> LABEL_DESC_NORMAL: 
    19 00000008 FFFF                <1>  dw %2 & 0FFFFh
    19 0000000A 0000                <1>  dw %1 & 0FFFFh
    19 0000000C 00                  <1>  db (%1 >> 16) & 0FFh
    19 0000000D 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    19 0000000F 00                  <1>  db (%1 >> 24) & 0FFh
    20                                  LABEL_DESC_CODE32: Descriptor        0, SegCode32Len - 1, DA_C + DA_32		; 非一致 32 位代码段
    20                              <1> LABEL_DESC_CODE32: 
    20 00000010 BF00                <1>  dw %2 & 0FFFFh
    20 00000012 0000                <1>  dw %1 & 0FFFFh
    20 00000014 00                  <1>  db (%1 >> 16) & 0FFh
    20 00000015 9840                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    20 00000017 00                  <1>  db (%1 >> 24) & 0FFh
    21                                  ;LABEL_DESC_CODE16: Descriptor	     0,           0ffffh, DA_C			; 非一致 16 位代码段
    22                                  LABEL_DESC_DATA:   Descriptor	     0,      DataLen - 1, DA_DRW		; Data
    22                              <1> LABEL_DESC_DATA: 
    22 00000018 7503                <1>  dw %2 & 0FFFFh
    22 0000001A 0000                <1>  dw %1 & 0FFFFh
    22 0000001C 00                  <1>  db (%1 >> 16) & 0FFh
    22 0000001D 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    22 0000001F 00                  <1>  db (%1 >> 24) & 0FFh
    23                                  LABEL_DESC_STACK:  Descriptor	     0,	      TopOfStack, DA_DRWA + DA_32	; Stack
    23                              <1> LABEL_DESC_STACK: 
    23 00000020 FF01                <1>  dw %2 & 0FFFFh
    23 00000022 0000                <1>  dw %1 & 0FFFFh
    23 00000024 00                  <1>  db (%1 >> 16) & 0FFh
    23 00000025 9340                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    23 00000027 00                  <1>  db (%1 >> 24) & 0FFh
    24                                  LABEL_DESC_TEST:   Descriptor 0500000h,		  0ffffh, DA_DRW		; Test
    24                              <1> LABEL_DESC_TEST: 
    24 00000028 FFFF                <1>  dw %2 & 0FFFFh
    24 0000002A 0000                <1>  dw %1 & 0FFFFh
    24 0000002C 50                  <1>  db (%1 >> 16) & 0FFh
    24 0000002D 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    24 0000002F 00                  <1>  db (%1 >> 24) & 0FFh
    25                                  LABEL_DESC_VIDEO:  Descriptor  0B8000h,           0ffffh, DA_DRW	    	; 显存首地址
    25                              <1> LABEL_DESC_VIDEO: 
    25 00000030 FFFF                <1>  dw %2 & 0FFFFh
    25 00000032 0080                <1>  dw %1 & 0FFFFh
    25 00000034 0B                  <1>  db (%1 >> 16) & 0FFh
    25 00000035 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    25 00000037 00                  <1>  db (%1 >> 24) & 0FFh
    26                                  ; GDT 结束
    27                                  
    28                                  GdtLen			equ	$ - LABEL_GDT	; GDT长度
    29 00000038 3700                    GdtPtr			dw	GdtLen - 1	; GDT界限
    30 0000003A 00000000                			dd	0		; GDT基地址(稍后初始化)
    31                                  
    32                                  ; GDT 选择子
    33                                  SelectorNormal		equ	LABEL_DESC_NORMAL	- LABEL_GDT
    34                                  SelectorCode32		equ	LABEL_DESC_CODE32	- LABEL_GDT
    35                                  ;SelectorCode16		equ	LABEL_DESC_CODE16	- LABEL_GDT
    36                                  SelectorData		equ	LABEL_DESC_DATA		- LABEL_GDT
    37                                  SelectorStack		equ	LABEL_DESC_STACK	- LABEL_GDT
    38                                  SelectorTest		equ	LABEL_DESC_TEST		- LABEL_GDT
    39                                  SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT
    40                                  ; END of [SECTION .gdt]
    41                                  
    42                                  
    43                                  
    44                                  [SECTION .data1]
    45                                  ALIGN	32
    46                                  [BITS	32]
    47                                  LABEL_DATA:
    48 00000000 50726F746563746564-     PMMessage:		db	"Protected Mode entered", 0
    48 00000009 204D6F646520656E74-
    48 00000012 6572656400         
    49 00000017 54657374206D656D6F-     TMMessage:		db	"Test memory...", 0
    49 00000020 72792E2E2E00       
    50 00000026 54657374206C6F6E67-     TLMessage:		db	"Test long content...OK", 0
    50 0000002F 20636F6E74656E742E-
    50 00000038 2E2E4F4B00         
    51                                  LongMessage:		
    52 0000003D 202020202020202020-     db "                         __  _  _         _      _                              "
    52 00000046 202020202020202020-
    52 0000004F 202020202020205F5F-
    52 00000058 20205F20205F202020-
    52 00000061 2020202020205F2020-
    52 0000006A 202020205F20202020-
    52 00000073 202020202020202020-
    52 0000007C 202020202020202020-
    52 00000085 2020202020202020   
    53 0000008D 202020202020202020-     db "                        / / (_)| |_  ___ | |__  (_)                             "
    53 00000096 202020202020202020-
    53 0000009F 2020202020202F202F-
    53 000000A8 20285F297C207C5F20-
    53 000000B1 205F5F5F207C207C5F-
    53 000000BA 5F2020285F29202020-
    53 000000C3 202020202020202020-
    53 000000CC 202020202020202020-
    53 000000D5 2020202020202020   
    54 000000DD 202020202020202020-     db "                       / /  | || __|/ __|| '_ \ | |                             "
    54 000000E6 202020202020202020-
    54 000000EF 20202020202F202F20-
    54 000000F8 207C207C7C205F5F7C-
    54 00000101 2F205F5F7C7C20275F-
    54 0000010A 205C207C207C202020-
    54 00000113 202020202020202020-
    54 0000011C 202020202020202020-
    54 00000125 2020202020202020   
    55 0000012D 202020202020202020-     db "                      / /___| || |_| (__ | | | || |                             "
    55 00000136 202020202020202020-
    55 0000013F 202020202F202F5F5F-
    55 00000148 5F7C207C7C207C5F7C-
    55 00000151 20285F5F207C207C20-
    55 0000015A 7C207C7C207C202020-
    55 00000163 202020202020202020-
    55 0000016C 202020202020202020-
    55 00000175 2020202020202020   
    56 0000017D 202020202020202020-     db "                      \____/|_| \__|\___||_| |_||_|  Loader                     "
    56 00000186 202020202020202020-
    56 0000018F 202020205C5F5F5F5F-
    56 00000198 2F7C5F7C205C5F5F7C-
    56 000001A1 5C5F5F5F7C7C5F7C20-
    56 000001AA 7C5F7C7C5F7C20204C-
    56 000001B3 6F6164657220202020-
    56 000001BC 202020202020202020-
    56 000001C5 2020202020202020   
    57 000001CD 20<rept>                times	160 		db	" "
    58 0000026D 4C6974636869204C6F-     times	10		db	"Litchi Long Message Test "
    58 00000276 6E67204D6573736167-
    58 0000027F 65205465737420-    
    58 0000027F <rept>             
    59 00000367 00                      			db	0
    60 00000368 546573742073746163-     TSMessage:		db	"Test stack...", 0
    60 00000371 6B2E2E2E00         
    61                                  
    62                                  OffsetPMMessage		equ	PMMessage - $$		; PMMessage 相对 Data Section 偏移
    63                                  OffsetTMMessage		equ	TMMessage - $$
    64                                  OffsetTLMessage		equ	TLMessage - $$
    65                                  OffsetLongMessage	equ	LongMessage - $$
    66                                  OffsetTSMessge		equ	TSMessage - $$
    67                                  
    68                                  DataLen			equ	$ - LABEL_DATA
    69                                  ; END of [SECTION .data1]
    70                                  
    71                                  
    72                                  
    73                                  ; 全局堆栈段
    74                                  [SECTION .gs]
    75                                  ALIGN	32
    76                                  [BITS	32]
    77                                  LABEL_STACK:
    78 00000000 00<rept>                times	512		db	0
    79                                  
    80                                  TopOfStack		equ	$ - LABEL_STACK - 1
    81                                  ; END of [SECTION .gs]
    82                                  
    83                                  
    84                                  
    85                                  [SECTION .s16]
    86                                  [BITS	16]
    87 00000000 48656C6C6F2C204C69-     HelloMessage:		db	"Hello, Litchi!", 0x0d, 0x0a
    87 00000009 74636869210D0A     
    88                                  HelloMessageEnd:
    89 00000010 546869732069732074-     AboutMessage:		db	"This is the loader of Bugen's tiny OS -- Litchi OS.", 0x0d, 0x0a
    89 00000019 6865206C6F61646572-
    89 00000022 206F6620427567656E-
    89 0000002B 27732074696E79204F-
    89 00000034 53202D2D204C697463-
    89 0000003D 6869204F532E0D0A   
    90 00000045 56657273696F6E2076-     			db	"Version v0.1.0, Build 200219", 0x0d, 0x0a
    90 0000004E 302E312E302C204275-
    90 00000057 696C64203230303231-
    90 00000060 390D0A             
    91 00000063 0D0A                    			db	0x0d, 0x0a
    92 00000065 28432920427567656E-     			db	"(C) BugenZhao 2020"
    92 0000006E 5A68616F2032303230 
    93                                  AboutMessageEnd:
    94                                  
    95                                  EarlyMessages:
    96                                  MessageLength		equ	16
    97                                  MessageTable:
    98 00000077 4E6F206B65726E656C-     NoLoaderMessage		db	"No kernel      X"
    98 00000080 20202020202058     
    99 00000087 4B65726E656C20666F-     KernelFoundMessage	db	"Kernel found  ! "
    99 00000090 756E6420202120     
   100 00000097 4B65726E656C206C6F-     ReadyMessage		db	"Kernel loaded ! "
   100 000000A0 61646564202120     
   101 000000A7 456D707479204B6572-     EmptyKernelMessage	db	"Empty Kernel   X"
   101 000000B0 6E656C20202058     
   102                                  
   103                                  EarlyDispStr:
   104                                  	; message_index in di, row:col in dx
   105 000000B7 52                      	push	dx					; 坑啊
   106 000000B8 8CD8                    	mov	ax, ds
   107 000000BA 8EC0                    	mov	es, ax					; es
   108 000000BC B81000                  	mov	ax, MessageLength
   109 000000BF 89C1                    	mov	cx, ax					; calculate string length
   110 000000C1 F7E7                    	mul	di					; dx:ax
   111 000000C3 05[7700]                	add	ax, MessageTable
   112 000000C6 89C5                    	mov	bp, ax					; es:bp -> string address
   113 000000C8 B80113                  	mov	ax, 0x1301				; ah=0x13 (write string)
   114 000000CB BB0E00                  	mov	bx, 0x000e				; bh=0x00 (page), bl=0x0e (color)
   115 000000CE 5A                      	pop	dx
   116 000000CF CD10                    	int	10h
   117 000000D1 C3                      	ret
   118                                  
   119                                  DispStr:
   120                                  	; begin in di, length in si, row:col in dx, color in bl
   121 000000D2 8CD8                    	mov	ax, ds
   122 000000D4 8EC0                    	mov	es, ax					; es
   123 000000D6 89FD                    	mov	bp, di					; es:bp -> string address
   124 000000D8 89F1                    	mov	cx, si					; string length 
   125 000000DA B80113                  	mov	ax, 0x1301				; ah=0x13 (write string)
   126 000000DD B700                    	mov	bh, 0x00				; bh=0x00 (page), bl=?? (color)
   127 000000DF CD10                    	int	10h
   128 000000E1 C3                      	ret
   129                                  
   130                                  ;	找到序号为 ax 的 Sector 在 FAT 中的条目, 结果放在 ax 中
   131                                  ;	需要注意的是, 中间需要读 FAT 的扇区到 es:bx 处, 所以函数一开始保存了 es 和 bx
   132                                  GetFATEntry:
   133 000000E2 06                      	push	es
   134 000000E3 53                      	push	bx
   135 000000E4 50                      	push	ax
   136 000000E5 B80080                  	mov	ax, BaseOfKernel; `.
   137 000000E8 2D0001                  	sub	ax, 0100h	;  | 在 BaseOfKernel 后面留出 4K 空间用于存放 FAT
   138 000000EB 8EC0                    	mov	es, ax		; /
   139 000000ED 58                      	pop	ax
   140 000000EE C606[8000]00            	mov	byte [bOdd], 0
   141 000000F3 BB0300                  	mov	bx, 3
   142 000000F6 F7E3                    	mul	bx					; dx:ax = ax * 3
   143 000000F8 BB0200                  	mov	bx, 2
   144 000000FB F7F3                    	div	bx					; dx:ax / 2  ==>  ax <- 商, dx <- 余数
   145 000000FD 83FA00                  	cmp	dx, 0
   146 00000100 7405                    	jz	LABEL_EVEN
   147 00000102 C606[8000]01            	mov	byte [bOdd], 1
   148                                  LABEL_EVEN:;偶数
   149                                  	; 现在 ax 中是 FATEntry 在 FAT 中的偏移量,下面来
   150                                  	; 计算 FATEntry 在哪个扇区中(FAT占用不止一个扇区)
   151 00000107 31D2                    	xor	dx, dx			
   152 00000109 8B1E[0B00]              	mov	bx, [BPB_BytsPerSec]
   153 0000010D F7F3                    	div	bx ; dx:ax / BPB_BytsPerSec
   154                                  		   ;  ax <- 商 (FATEntry 所在的扇区相对于 FAT 的扇区号)
   155                                  		   ;  dx <- 余数 (FATEntry 在扇区内的偏移)。
   156 0000010F 52                      	push	dx
   157 00000110 BB0000                  	mov	bx, 0 ; bx <- 0 于是, es:bx = (BaseOfKernel - 100):00
   158 00000113 83C001                  	add	ax, SectorNoOfFAT1 ; 此句之后的 ax 就是 FATEntry 所在的扇区号
   159 00000116 B102                    	mov	cl, 2
   160 00000118 E8(3E00)                	call	ReadSector ; 读取 FATEntry 所在的扇区, 一次读两个, 避免在边界
   161                                  			   ; 发生错误, 因为一个 FATEntry 可能跨越两个扇区
   162 0000011B 5A                      	pop	dx
   163 0000011C 01D3                    	add	bx, dx
   164 0000011E 268B07                  	mov	ax, [es:bx]
   165 00000121 803E[8000]01            	cmp	byte [bOdd], 1
   166 00000126 7503                    	jnz	LABEL_EVEN_2
   167 00000128 C1E804                  	shr	ax, 4
   168                                  LABEL_EVEN_2:
   169 0000012B 25FF0F                  	and	ax, 0FFFh
   170                                  
   171                                  LABEL_GET_FAT_ENRY_OK:
   172                                  
   173 0000012E 5B                      	pop	bx
   174 0000012F 07                      	pop	es
   175 00000130 C3                      	ret
   176                                  
   177                                  
   178                                  
   179                                  Entry:
   180 00000131 8CC8                    	mov	ax, cs
   181 00000133 8ED8                    	mov	ds, ax
   182 00000135 8EC0                    	mov	es, ax
   183 00000137 8ED0                    	mov	ss, ax
   184 00000139 BC0001                  	mov	sp, 0100h
   185                                  .Hello:
   186 0000013C BF[0000]                	mov	di, HelloMessage
   187 0000013F BE1000                  	mov	si, HelloMessageEnd - HelloMessage
   188 00000142 BA0004                  	mov	dx, 0x0400				; row:col
   189 00000145 B30E                    	mov	bl, 0x0e				; color
   190 00000147 E888FF                  	call	DispStr
   191                                  
   192 0000014A BF[1000]                	mov	di, AboutMessage
   193 0000014D BE6700                  	mov	si, AboutMessageEnd - AboutMessage
   194 00000150 BA0006                  	mov	dx, 0x0600				; row:col
   195 00000153 B30E                    	mov	bl, 0x0e				; color
   196 00000155 E87AFF                  	call	DispStr
   197                                  
   198                                  .RootSearchStart:
   199 00000158 30E4                    	xor	ah, ah
   200 0000015A 30D2                    	xor	dl, dl
   201 0000015C CD13                    	int	13h					; 软驱复位
   202                                  
   203 0000015E C706[7E00]1300          	mov	word [wSectorNo], SectorNoOfRootDirectory
   204 00000164 EB48                    	jmp	.RootSearchTest
   205                                  
   206                                  .RootSearchLoop:
   207                                  ; outer loop (sector)
   208                                  	; start_sector in di, size in cl, buf in es:bx
   209 00000166 B80080                  	mov	ax, BaseOfKernel
   210 00000169 8EC0                    	mov	es, ax
   211 0000016B B80000                  	mov	ax, OffsetOfKernel
   212 0000016E 89C3                    	mov	bx, ax					; 临时把根目录文件信息放在这里
   213 00000170 A1[7E00]                	mov	ax, [wSectorNo]				; Sector 序号 初始(0)
   214 00000173 B101                    	mov	cl, 1
   215 00000175 E8(3E00)                	call	ReadSector				; 读取根目录的一个 Sector
   216 00000178 BE[7000]                	mov	si, KernelFileName
   217 0000017B BF0000                  	mov	di, OffsetOfKernel
   218 0000017E FC                      	cld						; clear df flag
   219 0000017F BA1000                  	mov	dx, 10h					; 该扇区条目计数器
   220                                  
   221                                  .SectorSearchStart:
   222                                  ; middle loop (entry)
   223 00000182 83FA00                  	cmp	dx, 0
   224 00000185 741E                    	je	.NextSector				; 该扇区已经搜索完?
   225 00000187 4A                      	dec	dx
   226 00000188 B90B00                  	mov	cx, 11					; 文件名比较计数器
   227                                  .CompareFileName:
   228                                  ; inner loop (filename)
   229 0000018B 83F900                  	cmp	cx, 0
   230 0000018E 7427                    	je	.FileNameFound				; 字符全部匹配?
   231 00000190 49                      	dec	cx
   232 00000191 AC                      	lodsb						; [ds:si] -> al; 由于 df=0, 递减 si 
   233 00000192 263A05                  	cmp 	al, byte [es:di]
   234 00000195 7503                    	jne	.FileNameDifferent
   235 00000197 47                      	inc	di
   236 00000198 EBF1                    	jmp	.CompareFileName
   237                                  .FileNameDifferent:
   238 0000019A 83E7E0                  	and	di, 0ffe0h				; di 指向条目开头
   239 0000019D 83C720                  	add	di, 20h					; 下一个条目
   240 000001A0 BE[7000]                	mov	si, KernelFileName
   241 000001A3 EBDD                    	jmp	.SectorSearchStart
   242                                  
   243                                  .RootSearchUpdate:
   244                                  .NextSector:
   245 000001A5 8306[7E00]01            	add	word [wSectorNo], 1
   246 000001AA FF0E[7C00]              	dec	word [wRootDirSizeForLoop]
   247                                  
   248                                  .RootSearchTest:
   249 000001AE 833E[7C00]00            	cmp	word [wRootDirSizeForLoop], 0
   250 000001B3 7458                    	je	.NoKernel
   251 000001B5 EBAF                    	jmp	.RootSearchLoop
   252                                  
   253                                  
   254                                  .Result:
   255                                  .FileNameFound:
   256 000001B7 57                      	push	di
   257 000001B8 06                      	push	es
   258 000001B9 BF0100                  	mov	di, 1					; "Kernel found"
   259 000001BC BA2801                  	mov	dx, 0x0128				; row:col
   260 000001BF E8F5FE                  	call	EarlyDispStr
   261 000001C2 07                      	pop	es
   262 000001C3 5F                      	pop	di
   263                                  .LoadFile:
   264 000001C4 B80E00                  	mov	ax, RootDirSectors
   265 000001C7 83E7E0                  	and	di, 0FFE0h
   266 000001CA 83C71A                  	add	di, 01Ah				; Kernel 的首个 Sector 地址
   267 000001CD 268B0D                  	mov	cx, word [es:di]
   268 000001D0 83F900                  	cmp	cx, 0					; Kernel 为空文件
   269 000001D3 7444                    	je	.EmptyKernel
   270 000001D5 51                      	push	cx					; 保存此 Sector 在 FAT 中的序号
   271 000001D6 01C1                    	add	cx, ax
   272 000001D8 83C111                  	add	cx, DeltaSectorNo			; cl <- Kernel.BIN的起始扇区号(0-based)
   273 000001DB B80080                  	mov	ax, BaseOfKernel
   274 000001DE 8EC0                    	mov	es, ax					; es <- BaseOfKernel
   275 000001E0 BB0000                  	mov	bx, OffsetOfKernel			; bx <- OffsetOfKernel
   276 000001E3 89C8                    	mov	ax, cx					; ax <- Sector 号
   277                                  .LoadLoop:
   278 000001E5 B101                    	mov	cl, 1
   279 000001E7 E8(3E00)                	call	ReadSector
   280 000001EA 58                      	pop	ax					; 取出此 Sector 在 FAT 中的序号
   281 000001EB E8F4FE                  	call	GetFATEntry
   282 000001EE 3DFF0F                  	cmp	ax, 0FFFh				; 最后一个簇
   283 000001F1 740F                    	jz	.FileLoaded
   284 000001F3 50                      	push	ax					; 保存 Sector 在 FAT 中的序号
   285 000001F4 BA0E00                  	mov	dx, RootDirSectors
   286 000001F7 01D0                    	add	ax, dx
   287 000001F9 83C011                  	add	ax, DeltaSectorNo
   288 000001FC 031E[0B00]              	add	bx, [BPB_BytsPerSec]
   289 00000200 EBE3                    	jmp	.LoadLoop
   290                                  .FileLoaded:
   291 00000202 BF0200                  	mov	di, 2					; "Ready"
   292 00000205 BA2802                  	mov	dx, 0x0228				; row:col
   293 00000208 E8ACFE                  	call	EarlyDispStr
   294 0000020B EB18                    	jmp	PreparePM				; 准备进入保护模式！！！
   295                                  
   296                                  .NoKernel:
   297 0000020D BF0000                  	mov	di, 0					; "No kernel"
   298 00000210 BA2801                  	mov	dx, 0x0128				; row:col
   299 00000213 E8A1FE                  	call	EarlyDispStr
   300 00000216 E9(BD00)                	jmp	Fin
   301                                  .EmptyKernel:
   302 00000219 BF0300                  	mov	di, 3					; "Empty kernel"
   303 0000021C BA3801                  	mov	dx, 0x0138				; row:col
   304 0000021F E895FE                  	call	EarlyDispStr
   305 00000222 E9(BD00)                	jmp	Fin
   306                                  
   307                                  PreparePM:
   308                                  	; 初始化 32 位代码段描述符，将 32 位代码的物理地址填写到描述符中
   309 00000225 6631C0                  	xor	eax, eax
   310 00000228 8CC8                    	mov	ax, cs
   311 0000022A 66C1E004                	shl	eax, 4
   312 0000022E 6605[00000000]          	add	eax, LABEL_SEG_CODE32
   313 00000234 A3[1200]                	mov	word [LABEL_DESC_CODE32 + 2], ax
   314 00000237 66C1E810                	shr	eax, 16
   315 0000023B A2[1400]                	mov	byte [LABEL_DESC_CODE32 + 4], al
   316 0000023E 8826[1700]              	mov	byte [LABEL_DESC_CODE32 + 7], ah
   317                                  
   318                                  	; 初始化 Data 段描述符
   319 00000242 6631C0                  	xor	eax, eax
   320 00000245 8CD8                    	mov	ax, ds
   321 00000247 66C1E004                	shl	eax, 4
   322 0000024B 6605[00000000]          	add	eax, LABEL_DATA
   323 00000251 A3[1A00]                	mov	word [LABEL_DESC_DATA + 2], ax
   324 00000254 66C1E810                	shr	eax, 16
   325 00000258 A2[1C00]                	mov	byte [LABEL_DESC_DATA + 4], al
   326 0000025B 8826[1F00]              	mov	byte [LABEL_DESC_DATA + 7], ah
   327                                  
   328                                  	; 初始化 Stack 段描述符
   329 0000025F 6631C0                  	xor	eax, eax
   330 00000262 8CD8                    	mov	ax, ds
   331 00000264 66C1E004                	shl	eax, 4
   332 00000268 6605[00000000]          	add	eax, LABEL_STACK
   333 0000026E A3[2200]                	mov	word [LABEL_DESC_STACK + 2], ax
   334 00000271 66C1E810                	shr	eax, 16
   335 00000275 A2[2400]                	mov	byte [LABEL_DESC_STACK + 4], al
   336 00000278 8826[2700]              	mov	byte [LABEL_DESC_STACK + 7], ah
   337                                  
   338                                  	; 为加载 GDTR 作准备
   339 0000027C 6631C0                  	xor	eax, eax
   340 0000027F 8CD8                    	mov	ax, ds
   341 00000281 66C1E004                	shl	eax, 4
   342 00000285 6605[00000000]          	add	eax, LABEL_GDT		; eax <- gdt 基地址
   343 0000028B 66A3[3A00]              	mov	dword [GdtPtr + 2], eax	; [GdtPtr + 2] <- gdt 基地址
   344                                  
   345                                  	; 加载 GDTR
   346 0000028F 0F0116[3800]            	lgdt	[GdtPtr]
   347                                  
   348                                  	; 关中断
   349 00000294 FA                      	cli
   350                                  
   351                                  	; 打开地址线A20
   352 00000295 E492                    	in	al, 92h
   353 00000297 0C02                    	or	al, 00000010b
   354 00000299 E692                    	out	92h, al
   355                                  
   356                                  	; 设置 cr0 第 0 位为 1（保护模式）
   357 0000029B 0F20C0                  	mov	eax, cr0
   358 0000029E 6683C801                	or	eax, 1
   359 000002A2 0F22C0                  	mov	cr0, eax
   360                                  
   361                                  	; 真正进入保护模式
   362 000002A5 66EA000000001000        	jmp	dword SelectorCode32:0	; 执行这一句会把 SelectorCode32 装入 cs,
   363                                  					; 并跳转到 SelectorCode32:0  处
   364                                  
   365                                  
   366                                  
   367                                  [SECTION .s32]
   368                                  [BITS	32]
   369                                  LABEL_SEG_CODE32:
   370 00000000 EB0F                    	jmp	PMEntry
   371                                  
   372                                  PMDispStr:
   373                                  	; vram_offset in edi, message_offset in esi, color in ah
   374 00000002 EB07                    	jmp	.DispTest
   375                                  .DispLoop:
   376 00000004 65668907                	mov	[gs:edi], ax		; ah 颜色，al 字，写入显存
   377                                  .DispUpdate:
   378 00000008 83C702                  	add	edi, 2
   379                                  .DispTest:
   380 0000000B AC                      	lodsb				; 加载 DS:(E)SI 的字节到 AL，即 PMMessage, SI 递增
   381 0000000C 84C0                    	test	al, al			; '\0'
   382 0000000E 75F4                    	jne	.DispLoop
   383 00000010 C3                      	ret
   384                                  
   385                                  PMEntry:
   386 00000011 66B83000                	mov	ax, SelectorVideo
   387 00000015 8EE8                    	mov	gs, ax			; 初始化各选择子，cs已为代码段
   388 00000017 66B81800                	mov	ax, SelectorData
   389 0000001B 8ED8                    	mov	ds, ax
   390 0000001D 66B82800                	mov	ax, SelectorTest
   391 00000021 8EC0                    	mov	es, ax
   392 00000023 66B82000                	mov	ax, SelectorStack
   393 00000027 8ED0                    	mov	ss, ax
   394                                  	; ds: Data, gs: Video, es: Test, ss: Stack
   395 00000029 BF80070000              	mov	edi, (80 * 12 + 0) * 2	; 定位显存行列
   396 0000002E BE00000000              	mov	esi, OffsetPMMessage	; PMMessage 偏移，用于段寻址
   397                                  	; esi: Data, edi: Video
   398 00000033 B40C                    	mov	ah, 0Ch			; 0000: 黑底    1100: 红字
   399 00000035 E8C8FFFFFF              	call	PMDispStr
   400                                  
   401                                  .TestMemory:
   402 0000003A BF20080000              	mov	edi, (80 * 13 + 0) * 2
   403 0000003F BE17000000              	mov	esi, OffsetTMMessage
   404 00000044 B40B                    	mov	ah, 0Bh
   405 00000046 E8B7FFFFFF              	call	PMDispStr
   406                                  .TestWrite:				; 尝试读写 5MiB 处的内存
   407 0000004B 31F6                    	xor	esi, esi
   408 0000004D 66BA4F4B                	mov	dx, 0x4b4f
   409 00000051 26668916                	mov	[es:esi], dx
   410                                  	; (gdb) x/2cb 0x500000
   411                                  	; 0x500000:       79 'O'  75 'K'
   412                                  .TestRead:
   413 00000055 BF48080000              	mov	edi, (80 * 13 + 20) * 2
   414 0000005A B40B                    	mov	ah, 0Bh			; color
   415 0000005C 268A06                  	mov	al, [es:esi]
   416 0000005F 65668907                	mov	[gs:edi], ax
   417 00000063 268A4601                	mov	al, [es:esi + 1]
   418 00000067 6566894702              	mov	[gs:edi + 2], ax
   419                                  
   420                                  .TestLongContent:
   421 0000006C BF000A0000              	mov	edi, (80 * 16 + 0) * 2
   422 00000071 BE3D000000              	mov	esi, OffsetLongMessage
   423 00000076 B40A                    	mov	ah, 0Ah
   424 00000078 E885FFFFFF              	call	PMDispStr
   425 0000007D BFC0080000              	mov	edi, (80 * 14 + 0) * 2
   426 00000082 BE26000000              	mov	esi, OffsetTLMessage
   427 00000087 B40A                    	mov	ah, 0Ah
   428 00000089 E874FFFFFF              	call	PMDispStr
   429                                  
   430                                  .TestStack:
   431 0000008E BF5C080000              	mov	edi, (80 * 13 + 30) *2
   432 00000093 BE68030000              	mov	esi, OffsetTSMessge
   433 00000098 B409                    	mov	ah, 09h
   434 0000009A E863FFFFFF              	call	PMDispStr
   435 0000009F 66B84F09                	mov	ax, 0x094f		
   436 000000A3 66BA4B09                	mov	dx, 0x094b
   437 000000A7 6652                    	push	dx
   438 000000A9 6650                    	push	ax
   439 000000AB 665A                    	pop	dx
   440 000000AD 6658                    	pop	ax
   441 000000AF BF80080000              	mov	edi, (80 * 13 + 48) * 2
   442 000000B4 65668917                	mov	[gs:edi], dx
   443 000000B8 6566894702              	mov	[gs:edi + 2], ax
   444                                  
   445                                  Fin:
   446 000000BD F4                      	hlt
   447 000000BE EBFD                    	jmp	Fin
   448                                  
   449                                  SegCode32Len	equ	$ - LABEL_SEG_CODE32
   450                                  ; END of [SECTION .s32]
