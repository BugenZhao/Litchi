     1                                  %include	"pm.inc"
     1                              <1> 
     2                              <1> 
     3                              <1> ; 描述符图示
     4                              <1> 
     5                              <1> ; 图示一
     6                              <1> ;
     7                              <1> ;  ------ ┏━━┳━━┓高地址
     8                              <1> ;         ┃ 7  ┃ 段 ┃
     9                              <1> ;         ┣━━┫    ┃
    10                              <1> ;                  基
    11                              <1> ;  字节 7 ┆    ┆    ┆
    12                              <1> ;                  址
    13                              <1> ;         ┣━━┫ ② ┃
    14                              <1> ;         ┃ 0  ┃    ┃
    15                              <1> ;  ------ ┣━━╋━━┫
    16                              <1> ;         ┃ 7  ┃ G  ┃
    17                              <1> ;         ┣━━╉──┨
    18                              <1> ;         ┃ 6  ┃ D  ┃
    19                              <1> ;         ┣━━╉──┨
    20                              <1> ;         ┃ 5  ┃ 0  ┃
    21                              <1> ;         ┣━━╉──┨
    22                              <1> ;         ┃ 4  ┃ AVL┃
    23                              <1> ;  字节 6 ┣━━╉──┨
    24                              <1> ;         ┃ 3  ┃    ┃
    25                              <1> ;         ┣━━┫ 段 ┃
    26                              <1> ;         ┃ 2  ┃ 界 ┃
    27                              <1> ;         ┣━━┫ 限 ┃
    28                              <1> ;         ┃ 1  ┃    ┃
    29                              <1> ;         ┣━━┫ ② ┃
    30                              <1> ;         ┃ 0  ┃    ┃
    31                              <1> ;  ------ ┣━━╋━━┫
    32                              <1> ;         ┃ 7  ┃ P  ┃
    33                              <1> ;         ┣━━╉──┨
    34                              <1> ;         ┃ 6  ┃    ┃
    35                              <1> ;         ┣━━┫ DPL┃
    36                              <1> ;         ┃ 5  ┃    ┃
    37                              <1> ;         ┣━━╉──┨
    38                              <1> ;         ┃ 4  ┃ S  ┃
    39                              <1> ;  字节 5 ┣━━╉──┨
    40                              <1> ;         ┃ 3  ┃    ┃
    41                              <1> ;         ┣━━┫ T  ┃
    42                              <1> ;         ┃ 2  ┃ Y  ┃
    43                              <1> ;         ┣━━┫ P  ┃
    44                              <1> ;         ┃ 1  ┃ E  ┃
    45                              <1> ;         ┣━━┫    ┃
    46                              <1> ;         ┃ 0  ┃    ┃
    47                              <1> ;  ------ ┣━━╋━━┫
    48                              <1> ;         ┃ 23 ┃    ┃
    49                              <1> ;         ┣━━┫    ┃
    50                              <1> ;         ┃ 22 ┃    ┃
    51                              <1> ;         ┣━━┫ 段 ┃
    52                              <1> ;
    53                              <1> ;   字节  ┆    ┆ 基 ┆
    54                              <1> ; 2, 3, 4
    55                              <1> ;         ┣━━┫ 址 ┃
    56                              <1> ;         ┃ 1  ┃ ① ┃
    57                              <1> ;         ┣━━┫    ┃
    58                              <1> ;         ┃ 0  ┃    ┃
    59                              <1> ;  ------ ┣━━╋━━┫
    60                              <1> ;         ┃ 15 ┃    ┃
    61                              <1> ;         ┣━━┫    ┃
    62                              <1> ;         ┃ 14 ┃    ┃
    63                              <1> ;         ┣━━┫ 段 ┃
    64                              <1> ;
    65                              <1> ; 字节 0,1┆    ┆ 界 ┆
    66                              <1> ;
    67                              <1> ;         ┣━━┫ 限 ┃
    68                              <1> ;         ┃ 1  ┃ ① ┃
    69                              <1> ;         ┣━━┫    ┃
    70                              <1> ;         ┃ 0  ┃    ┃
    71                              <1> ;  ------ ┗━━┻━━┛低地址
    72                              <1> ;
    73                              <1> 
    74                              <1> 
    75                              <1> ; 图示二
    76                              <1> 
    77                              <1> ; 高地址………………………………………………………………………低地址
    78                              <1> 
    79                              <1> ; |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0    |
    80                              <1> ; |7654321076543210765432107654321076543210765432107654321076543210|	<- 共 8 字节
    81                              <1> ; |--------========--------========--------========--------========|
    82                              <1> ; ┏━━━┳━━━━━━━┳━━━━━━━━━━━┳━━━━━━━┓
    83                              <1> ; ┃31..24┃   (见下图)   ┃     段基址(23..0)    ┃ 段界限(15..0)┃
    84                              <1> ; ┃      ┃              ┃                      ┃              ┃
    85                              <1> ; ┃ 基址2┃③│②│    ①┃基址1b│   基址1a     ┃    段界限1   ┃
    86                              <1> ; ┣━━━╋━━━┳━━━╋━━━━━━━━━━━╋━━━━━━━┫
    87                              <1> ; ┃   %6 ┃  %5  ┃  %4  ┃  %3  ┃     %2       ┃       %1     ┃
    88                              <1> ; ┗━━━┻━━━┻━━━┻━━━┻━━━━━━━┻━━━━━━━┛
    89                              <1> ;         │                \_________
    90                              <1> ;         │                          \__________________
    91                              <1> ;         │                                             \________________________________________________
    93                              <1> ;         │                                                                                              ;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳
    94                              <1> ;         ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
    95                              <1> ;         ┣━━╋━━╋━━╋━━╋━━┻━━┻━━┻━━╋━━╋━━┻━━╋━━╋━━┻━━┻━━┻━━┫
    96                              <1> ;         ┃ G  ┃ D  ┃ 0  ┃ AVL┃   段界限 2 (19..16)  ┃  P ┃   DPL    ┃ S  ┃       TYPE           ┃
    97                              <1> ;         ┣━━┻━━┻━━┻━━╋━━━━━━━━━━━╋━━┻━━━━━┻━━┻━━━━━━━━━━━┫
    98                              <1> ;         ┃      ③: 属性 2      ┃    ②: 段界限 2      ┃                   ①: 属性1                  ┃
    99                              <1> ;         ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━━━━━━━━━━━━━┛
   100                              <1> ;       高地址                                                                                          低地址
   101                              <1> ;
   102                              <1> ;
   103                              <1> 
   104                              <1> ; 说明:
   105                              <1> ;
   106                              <1> ; (1) P:    存在(Present)位。
   107                              <1> ;		P=1 表示描述符对地址转换是有效的，或者说该描述符所描述的段存在，即在内存中；
   108                              <1> ;		P=0 表示描述符对地址转换无效，即该段不存在。使用该描述符进行内存访问时会引起异常。
   109                              <1> ;
   110                              <1> ; (2) DPL:  表示描述符特权级(Descriptor Privilege level)，共2位。它规定了所描述段的特权级，用于特权检查，以决定对该段能否访问。 
   111                              <1> ;
   112                              <1> ; (3) S:   说明描述符的类型。
   113                              <1> ;		对于存储段描述符而言，S=1，以区别与系统段描述符和门描述符(S=0)。 
   114                              <1> ;
   115                              <1> ; (4) TYPE: 说明存储段描述符所描述的存储段的具体属性。
   116                              <1> ;
   117                              <1> ;		 
   118                              <1> ;	数据段类型	类型值		说明
   119                              <1> ;			----------------------------------
   120                              <1> ;			0		只读 
   121                              <1> ;			1		只读、已访问 
   122                              <1> ;			2		读/写 
   123                              <1> ;			3		读/写、已访问 
   124                              <1> ;			4		只读、向下扩展 
   125                              <1> ;			5		只读、向下扩展、已访问 
   126                              <1> ;			6		读/写、向下扩展 
   127                              <1> ;			7		读/写、向下扩展、已访问 
   128                              <1> ;
   129                              <1> ;		
   130                              <1> ;			类型值		说明
   131                              <1> ;	代码段类型	----------------------------------
   132                              <1> ;			8		只执行 
   133                              <1> ;			9		只执行、已访问 
   134                              <1> ;			A		执行/读 
   135                              <1> ;			B		执行/读、已访问 
   136                              <1> ;			C		只执行、一致码段 
   137                              <1> ;			D		只执行、一致码段、已访问 
   138                              <1> ;			E		执行/读、一致码段 
   139                              <1> ;			F		执行/读、一致码段、已访问 
   140                              <1> ;
   141                              <1> ;		
   142                              <1> ;	系统段类型	类型编码	说明
   143                              <1> ;			----------------------------------
   144                              <1> ;			0		<未定义>
   145                              <1> ;			1		可用286TSS
   146                              <1> ;			2		LDT
   147                              <1> ;			3		忙的286TSS
   148                              <1> ;			4		286调用门
   149                              <1> ;			5		任务门
   150                              <1> ;			6		286中断门
   151                              <1> ;			7		286陷阱门
   152                              <1> ;			8		未定义
   153                              <1> ;			9		可用386TSS
   154                              <1> ;			A		<未定义>
   155                              <1> ;			B		忙的386TSS
   156                              <1> ;			C		386调用门
   157                              <1> ;			D		<未定义>
   158                              <1> ;			E		386中断门
   159                              <1> ;			F		386陷阱门
   160                              <1> ;
   161                              <1> ; (5) G:    段界限粒度(Granularity)位。
   162                              <1> ;		G=0 表示界限粒度为字节；
   163                              <1> ;		G=1 表示界限粒度为4K 字节。
   164                              <1> ;           注意，界限粒度只对段界限有效，对段基地址无效，段基地址总是以字节为单位。 
   165                              <1> ;
   166                              <1> ; (6) D:    D位是一个很特殊的位，在描述可执行段、向下扩展数据段或由SS寄存器寻址的段(通常是堆栈段)的三种描述符中的意义各不相同。 
   167                              <1> ;           ⑴ 在描述可执行段的描述符中，D位决定了指令使用的地址及操作数所默认的大小。
   168                              <1> ;		① D=1表示默认情况下指令使用32位地址及32位或8位操作数，这样的代码段也称为32位代码段；
   169                              <1> ;		② D=0 表示默认情况下，使用16位地址及16位或8位操作数，这样的代码段也称为16位代码段，它与80286兼容。可以使用地址大小前缀和操作数大小前缀分别改变默认的地址或操作数的大小。 
   170                              <1> ;           ⑵ 在向下扩展数据段的描述符中，D位决定段的上部边界。
   171                              <1> ;		① D=1表示段的上部界限为4G；
   172                              <1> ;		② D=0表示段的上部界限为64K，这是为了与80286兼容。 
   173                              <1> ;           ⑶ 在描述由SS寄存器寻址的段描述符中，D位决定隐式的堆栈访问指令(如PUSH和POP指令)使用何种堆栈指针寄存器。
   174                              <1> ;		① D=1表示使用32位堆栈指针寄存器ESP；
   175                              <1> ;		② D=0表示使用16位堆栈指针寄存器SP，这与80286兼容。 
   176                              <1> ;
   177                              <1> ; (7) AVL:  软件可利用位。80386对该位的使用未左规定，Intel公司也保证今后开发生产的处理器只要与80386兼容，就不会对该位的使用做任何定义或规定。 
   178                              <1> ;
   179                              <1> 
   180                              <1> 
   181                              <1> ;----------------------------------------------------------------------------
   182                              <1> ; 在下列类型值命名中：
   183                              <1> ;       DA_  : Descriptor Attribute
   184                              <1> ;       D    : 数据段
   185                              <1> ;       C    : 代码段
   186                              <1> ;       S    : 系统段
   187                              <1> ;       R    : 只读
   188                              <1> ;       RW   : 读写
   189                              <1> ;       A    : 已访问
   190                              <1> ;       其它 : 可按照字面意思理解
   191                              <1> ;----------------------------------------------------------------------------
   192                              <1> 
   193                              <1> ; 描述符类型
   194                              <1> DA_32		EQU	4000h	; 32 位段
   195                              <1> 
   196                              <1> DA_DPL0		EQU	  00h	; DPL = 0
   197                              <1> DA_DPL1		EQU	  20h	; DPL = 1
   198                              <1> DA_DPL2		EQU	  40h	; DPL = 2
   199                              <1> DA_DPL3		EQU	  60h	; DPL = 3
   200                              <1> 
   201                              <1> ; 存储段描述符类型
   202                              <1> DA_DR		EQU	90h	; 存在的只读数据段类型值
   203                              <1> DA_DRW		EQU	92h	; 存在的可读写数据段属性值
   204                              <1> DA_DRWA		EQU	93h	; 存在的已访问可读写数据段类型值
   205                              <1> DA_C		EQU	98h	; 存在的只执行代码段属性值
   206                              <1> DA_CR		EQU	9Ah	; 存在的可执行可读代码段属性值
   207                              <1> DA_CCO		EQU	9Ch	; 存在的只执行一致代码段属性值
   208                              <1> DA_CCOR		EQU	9Eh	; 存在的可执行可读一致代码段属性值
   209                              <1> 
   210                              <1> ; 系统段描述符类型
   211                              <1> DA_LDT		EQU	  82h	; 局部描述符表段类型值
   212                              <1> DA_TaskGate	EQU	  85h	; 任务门类型值
   213                              <1> DA_386TSS	EQU	  89h	; 可用 386 任务状态段类型值
   214                              <1> DA_386CGate	EQU	  8Ch	; 386 调用门类型值
   215                              <1> DA_386IGate	EQU	  8Eh	; 386 中断门类型值
   216                              <1> DA_386TGate	EQU	  8Fh	; 386 陷阱门类型值
   217                              <1> 
   218                              <1> 
   219                              <1> ; 选择子图示:
   220                              <1> ;         ┏━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┳━━┓
   221                              <1> ;         ┃ 15 ┃ 14 ┃ 13 ┃ 12 ┃ 11 ┃ 10 ┃ 9  ┃ 8  ┃ 7  ┃ 6  ┃ 5  ┃ 4  ┃ 3  ┃ 2  ┃ 1  ┃ 0  ┃
   222                              <1> ;         ┣━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━┻━━╋━━╋━━┻━━┫
   223                              <1> ;         ┃                                 描述符索引                                 ┃ TI ┃   RPL    ┃
   224                              <1> ;         ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┻━━┻━━━━━┛
   225                              <1> ;
   226                              <1> ; RPL(Requested Privilege Level): 请求特权级，用于特权检查。
   227                              <1> ;
   228                              <1> ; TI(Table Indicator): 引用描述符表指示位
   229                              <1> ;	TI=0 指示从全局描述符表GDT中读取描述符；
   230                              <1> ;	TI=1 指示从局部描述符表LDT中读取描述符。
   231                              <1> ;
   232                              <1> 
   233                              <1> ;----------------------------------------------------------------------------
   234                              <1> ; 选择子类型值说明
   235                              <1> ; 其中:
   236                              <1> ;       SA_  : Selector Attribute
   237                              <1> 
   238                              <1> SA_RPL0		EQU	0	; ┓
   239                              <1> SA_RPL1		EQU	1	; ┣ RPL
   240                              <1> SA_RPL2		EQU	2	; ┃
   241                              <1> SA_RPL3		EQU	3	; ┛
   242                              <1> 
   243                              <1> SA_TIG		EQU	0	; ┓TI
   244                              <1> SA_TIL		EQU	4	; ┛
   245                              <1> ;----------------------------------------------------------------------------
   246                              <1> 
   247                              <1> 
   248                              <1> 
   249                              <1> ; 宏 ------------------------------------------------------------------------------------------------------
   250                              <1> ;
   251                              <1> ; 描述符
   252                              <1> ; usage: Descriptor Base, Limit, Attr
   253                              <1> ;        Base:  dd
   254                              <1> ;        Limit: dd (low 20 bits available)
   255                              <1> ;        Attr:  dw (lower 4 bits of higher byte are always 0)
   256                              <1> %macro Descriptor 3
   257                              <1> 	dw	%2 & 0FFFFh				; 段界限1
   258                              <1> 	dw	%1 & 0FFFFh				; 段基址1
   259                              <1> 	db	(%1 >> 16) & 0FFh			; 段基址2
   260                              <1> 	dw	((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)	; 属性1 + 段界限2 + 属性2
   261                              <1> 	db	(%1 >> 24) & 0FFh			; 段基址3
   262                              <1> %endmacro ; 共 8 字节
   263                              <1> ;
   264                              <1> ; 门
   265                              <1> ; usage: Gate Selector, Offset, DCount, Attr
   266                              <1> ;        Selector:  dw
   267                              <1> ;        Offset:    dd
   268                              <1> ;        DCount:    db
   269                              <1> ;        Attr:      db
   270                              <1> %macro Gate 4
   271                              <1> 	dw	(%2 & 0FFFFh)				; 偏移1
   272                              <1> 	dw	%1					; 选择子
   273                              <1> 	dw	(%3 & 1Fh) | ((%4 << 8) & 0FF00h)	; 属性
   274                              <1> 	dw	((%2 >> 16) & 0FFFFh)			; 偏移2
   275                              <1> %endmacro ; 共 8 字节
   276                              <1> ; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     2                                  
     3                                  	org	0x100
     4 00000000 E9(8700)                	jmp	Entry
     5                                  
     6                                  [SECTION .gdt]
     7                                  ; GDT
     8                                  ;                               段基址,       段界限     , 属性
     9                                  LABEL_GDT:	   Descriptor        0,                0, 0           		; 空描述符
     9                              <1> LABEL_GDT: 
     9 00000000 0000                <1>  dw %2 & 0FFFFh
     9 00000002 0000                <1>  dw %1 & 0FFFFh
     9 00000004 00                  <1>  db (%1 >> 16) & 0FFh
     9 00000005 0000                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
     9 00000007 00                  <1>  db (%1 >> 24) & 0FFh
    10                                  LABEL_DESC_NORMAL: Descriptor	     0,		  0ffffh, DA_DRW		; Normal, 用于返回实模式
    10                              <1> LABEL_DESC_NORMAL: 
    10 00000008 FFFF                <1>  dw %2 & 0FFFFh
    10 0000000A 0000                <1>  dw %1 & 0FFFFh
    10 0000000C 00                  <1>  db (%1 >> 16) & 0FFh
    10 0000000D 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    10 0000000F 00                  <1>  db (%1 >> 24) & 0FFh
    11                                  LABEL_DESC_CODE32: Descriptor        0, SegCode32Len - 1, DA_C + DA_32		; 非一致 32 位代码段
    11                              <1> LABEL_DESC_CODE32: 
    11 00000010 8A00                <1>  dw %2 & 0FFFFh
    11 00000012 0000                <1>  dw %1 & 0FFFFh
    11 00000014 00                  <1>  db (%1 >> 16) & 0FFh
    11 00000015 9840                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    11 00000017 00                  <1>  db (%1 >> 24) & 0FFh
    12                                  ;LABEL_DESC_CODE16: Descriptor	     0,           0ffffh, DA_C			; 非一致 16 位代码段
    13                                  LABEL_DESC_DATA:   Descriptor	     0,      DataLen - 1, DA_DRW		; Data
    13                              <1> LABEL_DESC_DATA: 
    13 00000018 6703                <1>  dw %2 & 0FFFFh
    13 0000001A 0000                <1>  dw %1 & 0FFFFh
    13 0000001C 00                  <1>  db (%1 >> 16) & 0FFh
    13 0000001D 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    13 0000001F 00                  <1>  db (%1 >> 24) & 0FFh
    14                                  LABEL_DESC_TEST:   Descriptor 0500000h,		  0ffffh, DA_DRW		; Test
    14                              <1> LABEL_DESC_TEST: 
    14 00000020 FFFF                <1>  dw %2 & 0FFFFh
    14 00000022 0000                <1>  dw %1 & 0FFFFh
    14 00000024 50                  <1>  db (%1 >> 16) & 0FFh
    14 00000025 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    14 00000027 00                  <1>  db (%1 >> 24) & 0FFh
    15                                  LABEL_DESC_VIDEO:  Descriptor  0B8000h,           0ffffh, DA_DRW	    	; 显存首地址
    15                              <1> LABEL_DESC_VIDEO: 
    15 00000028 FFFF                <1>  dw %2 & 0FFFFh
    15 0000002A 0080                <1>  dw %1 & 0FFFFh
    15 0000002C 0B                  <1>  db (%1 >> 16) & 0FFh
    15 0000002D 9200                <1>  dw ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)
    15 0000002F 00                  <1>  db (%1 >> 24) & 0FFh
    16                                  ; GDT 结束
    17                                  
    18                                  GdtLen			equ	$ - LABEL_GDT	; GDT长度
    19 00000030 2F00                    GdtPtr			dw	GdtLen - 1	; GDT界限
    20 00000032 00000000                			dd	0		; GDT基地址
    21                                  
    22                                  ; GDT 选择子
    23                                  SelectorNormal		equ	LABEL_DESC_NORMAL	- LABEL_GDT
    24                                  SelectorCode32		equ	LABEL_DESC_CODE32	- LABEL_GDT
    25                                  ;SelectorCode16		equ	LABEL_DESC_CODE16	- LABEL_GDT
    26                                  SelectorData		equ	LABEL_DESC_DATA		- LABEL_GDT
    27                                  SelectorTest		equ	LABEL_DESC_TEST		- LABEL_GDT
    28                                  SelectorVideo		equ	LABEL_DESC_VIDEO	- LABEL_GDT
    29                                  ; END of [SECTION .gdt]
    30                                  
    31                                  [SECTION .data1]
    32                                  ALIGN	32
    33                                  [BITS	32]
    34                                  LABEL_DATA:
    35 00000000 50726F746563746564-     PMMessage:		db	"Protected Mode entered", 0
    35 00000009 204D6F646520656E74-
    35 00000012 6572656400         
    36 00000017 54657374206D656D6F-     TMMessage:		db	"Test memory...", 0
    36 00000020 72792E2E2E00       
    37 00000026 54657374206C6F6E67-     TLMessage:		db	"Test long content...OK", 0
    37 0000002F 20636F6E74656E742E-
    37 00000038 2E2E4F4B00         
    38                                  LongMessage:		
    39 0000003D 202020202020202020-     db "                         __  _  _         _      _                              "
    39 00000046 202020202020202020-
    39 0000004F 202020202020205F5F-
    39 00000058 20205F20205F202020-
    39 00000061 2020202020205F2020-
    39 0000006A 202020205F20202020-
    39 00000073 202020202020202020-
    39 0000007C 202020202020202020-
    39 00000085 2020202020202020   
    40 0000008D 202020202020202020-     db "                        / / (_)| |_  ___ | |__  (_)                             "
    40 00000096 202020202020202020-
    40 0000009F 2020202020202F202F-
    40 000000A8 20285F297C207C5F20-
    40 000000B1 205F5F5F207C207C5F-
    40 000000BA 5F2020285F29202020-
    40 000000C3 202020202020202020-
    40 000000CC 202020202020202020-
    40 000000D5 2020202020202020   
    41 000000DD 202020202020202020-     db "                       / /  | || __|/ __|| '_ \ | |                             "
    41 000000E6 202020202020202020-
    41 000000EF 20202020202F202F20-
    41 000000F8 207C207C7C205F5F7C-
    41 00000101 2F205F5F7C7C20275F-
    41 0000010A 205C207C207C202020-
    41 00000113 202020202020202020-
    41 0000011C 202020202020202020-
    41 00000125 2020202020202020   
    42 0000012D 202020202020202020-     db "                      / /___| || |_| (__ | | | || |                             "
    42 00000136 202020202020202020-
    42 0000013F 202020202F202F5F5F-
    42 00000148 5F7C207C7C207C5F7C-
    42 00000151 20285F5F207C207C20-
    42 0000015A 7C207C7C207C202020-
    42 00000163 202020202020202020-
    42 0000016C 202020202020202020-
    42 00000175 2020202020202020   
    43 0000017D 202020202020202020-     db "                      \____/|_| \__|\___||_| |_||_|  Loader                     "
    43 00000186 202020202020202020-
    43 0000018F 202020205C5F5F5F5F-
    43 00000198 2F7C5F7C205C5F5F7C-
    43 000001A1 5C5F5F5F7C7C5F7C20-
    43 000001AA 7C5F7C7C5F7C20204C-
    43 000001B3 6F6164657220202020-
    43 000001BC 202020202020202020-
    43 000001C5 2020202020202020   
    44 000001CD 20<rept>                times	160 		db " "
    45 0000026D 4C6974636869204C6F-     times	10		db	"Litchi Long Message Test "
    45 00000276 6E67204D6573736167-
    45 0000027F 65205465737420-    
    45 0000027F <rept>             
    46 00000367 00                      			db	0
    47                                  
    48                                  OffsetPMMessage		equ	PMMessage-$$		; PMMessage 相对 Data Section 偏移
    49                                  OffsetTMMessage		equ	TMMessage-$$
    50                                  OffsetTLMessage		equ	TLMessage-$$
    51                                  OffsetLongMessage	equ	LongMessage-$$
    52                                  DataLen			equ	$ - LABEL_DATA
    53                                  ; END of [SECTION .data1]
    54                                  
    55                                  [SECTION .s16]
    56                                  [BITS	16]
    57 00000000 48656C6C6F2C204C69-     HelloMessage:		db	"Hello, Litchi!", 0x0d, 0x0a
    57 00000009 74636869210D0A     
    58                                  HelloMessageEnd:
    59 00000010 546869732069732074-     AboutMessage:		db	"This is the loader of Bugen's tiny OS -- Litchi OS.", 0x0d, 0x0a
    59 00000019 6865206C6F61646572-
    59 00000022 206F6620427567656E-
    59 0000002B 27732074696E79204F-
    59 00000034 53202D2D204C697463-
    59 0000003D 6869204F532E0D0A   
    60 00000045 56657273696F6E2076-     			db	"Version v0.1.0, Build 200219", 0x0d, 0x0a
    60 0000004E 302E312E302C204275-
    60 00000057 696C64203230303231-
    60 00000060 390D0A             
    61 00000063 0D0A                    			db	0x0d, 0x0a
    62 00000065 28432920427567656E-     			db	"(C) BugenZhao 2020"
    62 0000006E 5A68616F2032303230 
    63                                  AboutMessageEnd:
    64                                  
    65                                  DispStr:
    66                                  	; begin in di, length in si, row:col in dx, color in bl
    67 00000077 8CD8                    	mov	ax, ds
    68 00000079 8EC0                    	mov	es, ax					; es
    69 0000007B 89FD                    	mov	bp, di					; es:bp -> string address
    70 0000007D 89F1                    	mov	cx, si					; string length 
    71 0000007F B80113                  	mov	ax, 0x1301				; ah=0x13 (write string)
    72 00000082 B700                    	mov	bh, 0x00				; bh=0x00 (page), bl=?? (color)
    73 00000084 CD10                    	int	10h
    74 00000086 C3                      	ret
    75                                  
    76                                  Entry:
    77 00000087 8CC8                    	mov	ax, cs
    78 00000089 8ED8                    	mov	ds, ax
    79 0000008B 8EC0                    	mov	es, ax
    80 0000008D 8ED0                    	mov	ss, ax
    81 0000008F BC0001                  	mov	sp, 0100h
    82                                  .Hello:
    83 00000092 BF[0000]                	mov	di, HelloMessage
    84 00000095 BE1000                  	mov	si, HelloMessageEnd - HelloMessage
    85 00000098 BA0004                  	mov	dx, 0x0400				; row:col
    86 0000009B B30E                    	mov	bl, 0x0e				; color
    87 0000009D E8D7FF                  	call	DispStr
    88                                  
    89 000000A0 BF[1000]                	mov	di, AboutMessage
    90 000000A3 BE6700                  	mov	si, AboutMessageEnd - AboutMessage
    91 000000A6 BA0006                  	mov	dx, 0x0600				; row:col
    92 000000A9 B30E                    	mov	bl, 0x0e				; color
    93 000000AB E8C9FF                  	call	DispStr
    94                                  
    95                                  	; 初始化 32 位代码段描述符，将 32 位代码的物理地址填写到描述符中
    96 000000AE 6631C0                  	xor	eax, eax
    97 000000B1 8CC8                    	mov	ax, cs
    98 000000B3 66C1E004                	shl	eax, 4
    99 000000B7 6605[00000000]          	add	eax, LABEL_SEG_CODE32
   100 000000BD A3[1200]                	mov	word [LABEL_DESC_CODE32 + 2], ax
   101 000000C0 66C1E810                	shr	eax, 16
   102 000000C4 A2[1400]                	mov	byte [LABEL_DESC_CODE32 + 4], al
   103 000000C7 8826[1700]              	mov	byte [LABEL_DESC_CODE32 + 7], ah
   104                                  
   105                                  	; 初始化 Data 段描述符
   106 000000CB 6631C0                  	xor	eax, eax
   107 000000CE 8CC8                    	mov	ax, cs
   108 000000D0 66C1E004                	shl	eax, 4
   109 000000D4 6605[00000000]          	add	eax, LABEL_DATA
   110 000000DA A3[1A00]                	mov	word [LABEL_DESC_DATA + 2], ax
   111 000000DD 66C1E810                	shr	eax, 16
   112 000000E1 A2[1C00]                	mov	byte [LABEL_DESC_DATA + 4], al
   113 000000E4 8826[1F00]              	mov	byte [LABEL_DESC_DATA + 7], ah
   114                                  
   115                                  	; 为加载 GDTR 作准备
   116 000000E8 6631C0                  	xor	eax, eax
   117 000000EB 8CD8                    	mov	ax, ds
   118 000000ED 66C1E004                	shl	eax, 4
   119 000000F1 6605[00000000]          	add	eax, LABEL_GDT		; eax <- gdt 基地址
   120 000000F7 66A3[3200]              	mov	dword [GdtPtr + 2], eax	; [GdtPtr + 2] <- gdt 基地址
   121                                  
   122                                  	; 加载 GDTR
   123 000000FB 0F0116[3000]            	lgdt	[GdtPtr]
   124                                  
   125                                  	; 关中断
   126 00000100 FA                      	cli
   127                                  
   128                                  	; 打开地址线A20
   129 00000101 E492                    	in	al, 92h
   130 00000103 0C02                    	or	al, 00000010b
   131 00000105 E692                    	out	92h, al
   132                                  
   133                                  	; 设置 cr0 第 0 位为 1（保护模式）
   134 00000107 0F20C0                  	mov	eax, cr0
   135 0000010A 6683C801                	or	eax, 1
   136 0000010E 0F22C0                  	mov	cr0, eax
   137                                  
   138                                  	; 真正进入保护模式
   139 00000111 66EA000000001000        	jmp	dword SelectorCode32:0	; 执行这一句会把 SelectorCode32 装入 cs,
   140                                  					; 并跳转到 Code32Selector:0  处
   141                                  
   142                                  ; LABEL_REAL_ENTRY:		; 回到实模式
   143                                  ; 	mov	ax, cs
   144                                  ; 	mov	ds, ax
   145                                  ; 	mov	es, ax
   146                                  ; 	mov	ss, ax
   147                                  
   148                                  ; 	; mov	sp, [SPValueInRealMode]
   149                                  
   150                                  ; 	; 打开地址线A20
   151                                  ; 	in	al, 92h	
   152                                  ; 	and	al, 11111101b
   153                                  ; 	out	92h, al
   154                                  
   155                                  ; 	; 打开中断
   156                                  ; 	sti
   157                                  
   158                                  ; 	mov	ax, 4c00h	; `.
   159                                  ; 	int	21h		; /  回到 DOS
   160                                  
   161                                  ; END of [SECTION .s16]
   162                                  
   163                                  [SECTION .s32]; 32 位代码段. 由实模式跳入.
   164                                  [BITS	32]
   165                                  LABEL_SEG_CODE32:
   166 00000000 EB0F                    	jmp	PMEntry
   167                                  
   168                                  PMDispStr:
   169                                  	; vram_offset in edi, message_offset in esi, color in ah
   170 00000002 EB07                    	jmp	.DispTest
   171                                  .DispLoop:
   172 00000004 65668907                	mov	[gs:edi], ax		; ah 颜色，al 字，写入显存
   173                                  .DispUpdate:
   174 00000008 83C702                  	add	edi, 2
   175                                  .DispTest:
   176 0000000B AC                      	lodsb				; 加载 DS:(E)SI 的字节到 AL，即 PMMessage, SI 递增
   177 0000000C 84C0                    	test	al, al			; '\0'
   178 0000000E 75F4                    	jne	.DispLoop
   179 00000010 C3                      	ret
   180                                  
   181                                  PMEntry:
   182 00000011 66B82800                	mov	ax, SelectorVideo
   183 00000015 8EE8                    	mov	gs, ax			; 视频段选择子(目的)
   184 00000017 66B81800                	mov	ax, SelectorData
   185 0000001B 8ED8                    	mov	ds, ax
   186 0000001D 66B82000                	mov	ax, SelectorTest
   187 00000021 8EC0                    	mov	es, ax
   188                                  	; ds: Data, gs: Video, es: Test
   189 00000023 BF80070000              	mov	edi, (80 * 12 + 0) * 2	; 定位显存行列
   190 00000028 BE00000000              	mov	esi, OffsetPMMessage	; PMMessage 偏移，用于段寻址
   191                                  	; esi: Data, edi: Video
   192 0000002D B40C                    	mov	ah, 0Ch			; 0000: 黑底    1100: 红字
   193 0000002F E8CEFFFFFF              	call	PMDispStr
   194                                  
   195                                  TestMemory:
   196 00000034 BF20080000              	mov	edi, (80 * 13 + 0) * 2
   197 00000039 BE17000000              	mov	esi, OffsetTMMessage
   198 0000003E B40B                    	mov	ah, 0Bh
   199 00000040 E8BDFFFFFF              	call	PMDispStr
   200                                  TestWrite:				; 尝试读写 5MiB 处的内存
   201 00000045 31F6                    	xor	esi, esi
   202 00000047 B24F                    	mov	dl, 'O'
   203 00000049 B64B                    	mov	dh, 'K'
   204 0000004B 26668916                	mov	[es:esi], dx
   205                                  	; (gdb) x/2cb 0x500000
   206                                  	; 0x500000:       79 'O'  75 'K'
   207                                  TestRead:
   208 0000004F BF48080000              	mov	edi, (80 * 13 + 20) * 2
   209 00000054 B40B                    	mov	ah, 0Bh
   210 00000056 268A06                  	mov	al, [es:esi]
   211 00000059 65668907                	mov	[gs:edi], ax
   212 0000005D 268A4601                	mov	al, [es:esi + 1]
   213 00000061 6566894702              	mov	[gs:edi + 2], ax
   214                                  
   215                                  TestLongContent:
   216 00000066 BF000A0000              	mov	edi, (80 * 16 + 0) * 2
   217 0000006B BE3D000000              	mov	esi, OffsetLongMessage
   218 00000070 B40A                    	mov	ah, 0Ah
   219 00000072 E88BFFFFFF              	call	PMDispStr
   220 00000077 BFC0080000              	mov	edi, (80 * 14 + 0) * 2
   221 0000007C BE26000000              	mov	esi, OffsetTLMessage
   222 00000081 B40A                    	mov	ah, 0Ah
   223 00000083 E87AFFFFFF              	call	PMDispStr
   224                                  
   225                                  Fin:
   226 00000088 F4                      	hlt
   227 00000089 EBFD                    	jmp	Fin
   228                                  
   229                                  
   230                                  
   231                                  SegCode32Len	equ	$ - LABEL_SEG_CODE32
   232                                  ; END of [SECTION .s32]
   233                                  
   234                                  
   235                                  ; [SECTION .s16code]
   236                                  ; ALIGN	32
   237                                  ; [BITS	16]
   238                                  ; LABEL_SEG_CODE16:
   239                                  ; 	; 准备跳回实模式
   240                                  ; 	mov	ax, SelectorNormal
   241                                  ; 	mov	ds, ax
   242                                  ; 	mov	es, ax
   243                                  ; 	mov	fs, ax
   244                                  ; 	mov	gs, ax
   245                                  ; 	mov	ss, ax
   246                                  
   247                                  ; 	; 恢复 cr0
   248                                  ; 	mov	eax, cr0
   249                                  ; 	and	al, 11111110b
   250                                  ; 	mov	cr0, eax
   251                                  
   252                                  ; LABEL_GO_BACK_TO_REAL:
   253                                  ; 	jmp	0:LABEL_REAL_ENTRY	; 段地址会在程序开始处被设置成正确的值
   254                                  
   255                                  ; Code16Len	equ	$ - LABEL_SEG_CODE16
